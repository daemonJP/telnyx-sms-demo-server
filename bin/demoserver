#!/usr/bin/env python3
"""
Demo server for accepting SMS deliveries.

Usage: demoserver [OPTIONS] COMMAND [ARGS]...

Options:
  -h, --host TEXT     HTTP server IP.
  -p, --port INTEGER  HTTP server port.
  -s, --secret TEXT   Secret from your SMS messaging profile.  [required]
  --help              Show this message and exit.

Commands:
  aiohttp  Run the aiohttp-based demo server.
  flask    Run the Flask-based demo server.
  http     Run the HTTPServer-based demo server.

"""
import logging
import sys

import click

from smsdemo import flaskserver, httpserver, aiohttpserver
from smsdemo.constants import CONFIG_KEY, DEFAULT_IP, DEFAULT_PORT
from smsdemo.util import ServerConfig


@click.group()
@click.option("-h", "--host", type=str, default=DEFAULT_IP,
              help="HTTP server IP.")
@click.option("-p", "--port", type=int, default=DEFAULT_PORT,
              help="HTTP server port.")
@click.option("-s", "--secret", type=str, required=True,
              help="Secret from your SMS messaging profile.")
@click.pass_context
def cli(ctx, host, port, secret):
    """Run a sample SMS echo server. The server accepts Telnyx SMS webhook
    deliveries and sends an echo of the message back to the sender.
    """

    ctx.obj[CONFIG_KEY] = ServerConfig(
        host=host,
        port=port,
        secret=secret,
    )
    logging.basicConfig(stream=sys.stdout, level=logging.INFO)


@cli.command()
@click.pass_context
def flask(ctx):
    """Run the Flask-based demo server."""

    conf = ctx.obj[CONFIG_KEY]
    flaskserver.run(conf)


@cli.command()
@click.pass_context
def http(ctx):
    """Run the HTTPServer-based demo server."""

    conf = ctx.obj[CONFIG_KEY]
    httpserver.run(conf)


@cli.command()
@click.pass_context
def aiohttp(ctx):
    """Run the aiohttp-based demo server."""

    conf = ctx.obj[CONFIG_KEY]
    aiohttpserver.run(conf)


if __name__ == "__main__":
    cli(obj={})
